<div id="pmcontent">    <div class="paddiv1"></div>
      <script type="text/javascript">
//<![CDATA[
/* Form validation */
var requiredFields = new Array();
var fieldLinks = new Array();
var errorMessages = new Array();
var errorAreas = new Array();
var validationFunctions = new Array();
var details = new Array();

errorMessages["default"] = new Array();
requiredFields["default"] = new Array();



var maySubmitOnlyOnce=true;

requiredFields["default"].push("brandCode");
errorMessages["default"]["brandCode"] = "Bitte tragen Sie Ihre Zahlungsdetails ein";
errorMessages["default"]["submitonce"] = "Ihre Anfrage wird bearbeitet, bitte warten....";

var locked = false;
var _valFunc = new function() {};

var displayAmountExtras = new Object();

function show(detail, actionURL, group, brandCode) {

  if(config["pmmanimation"] != 1) {
    if(locked) { return false; }
    locked = true;
    setTimeout('locked=false',1000);
  }
  
  if(group == "card") {
    brandCode="brandCodeUndef";
  }
  
  document.forms["pageform"].action=actionURL;
  document.forms["pageform"].onsubmit=null;

  if(document.forms["pageform"].addEventListener) {
    document.forms["pageform"].removeEventListener('submit',_valFunc ,false);
    document.forms["pageform"].addEventListener('submit',_valFunc = function(e) { 
      result = formValidate(document.forms["pageform"] ,group); 
    if(result == false) {
      e=e||event;
      e.preventDefault? e.preventDefault() : e.returnValue = false; 
    } 
    },false);
  } else {
    document.forms["pageform"].detachEvent('onsubmit',_valFunc);
    document.forms["pageform"].attachEvent('onsubmit',_valFunc = function(e) { 
    result = formValidate(document.forms["pageform"] ,group); 
    if(result == false) {
      e=e||event;
      e.preventDefault? e.preventDefault() : e.returnValue = false; 
    }
    });
  }

  document.forms["pageform"]["brandCode"].value=brandCode;
  document.forms["pageform"]["displayGroup"].value=group;
  document.getElementById('extraCostAmount').innerHTML = displayAmountExtras[group];
  
  if(detail != "") {
      detail.slideit();
      for (i = 0; i < details.length; i++) {  
        if (details[i].divId != detail.divId) {
          details[i].slideup();
        }
      }
  }
  
  // possible selection handler hook
  var selectHandler = "select"+group+"Handler";
  if (eval("typeof " + selectHandler + " === 'function'")) {
    window[selectHandler](detail, actionURL, group, brandCode);
  }
  
  return false;
}


  addOnLoad(preventEnterSubmit);



//]]>
</script>
<script type="text/javascript" src="/js/animatedcollapse.js"></script>
<script type="text/javascript" src="/js/cc.js"></script>
  <input type="hidden" id="displayGroup" name="displayGroup" value="card">
<h2 id="stageheader">Geben Sie Ihre Kreditkartendaten ein:</h2>

<div id="displayAmount">
 Gesamtbetrag der Bestellung:  EUR 92.00 <span id="extraCostAmount"></span>
</div>


<ul id="paymentMethods">
    
    
      
<li style="list-style-type: none;">
   <input type="submit" name="brandName" value="KREDITKARTENDATEN" class="imgB pmB pmBcard2" onclick="return show(collapsecard, &#39;completeCard.shtml&#39;, &#39;card&#39;, &#39;brandCodeUndef&#39;);">
      <span id="pmmextracosts-card" class="pmmextracosts">
          </span>

  <span id="pmcarddescription" class="pmmdescription"></span>
    <div id="pmmdetails-card" class="pmmdetails" style="overflow: hidden; visibility: visible; height: 250px;">
    
    <script type="text/javascript">
      var collapsecard = new animatedcollapse("pmmdetails-card", 1000, false, false, config["pmmanimation"]==1?false:true);
      details.push(collapsecard);
      
              displayAmountExtras['card'] = "";
            
                  
                      addOnLoad(function () {
          setTimeout("show(collapsecard, 'completeCard.shtml', 'card', 'brandCodeUndef')",100);
        });
                    
      if (notNull(document.getElementById('pmmform-card'))) {
        document.getElementById('pmmform-card').setAttribute("autocomplete","off"); 
      }
    </script>
    
                  <!-- useNewCardId = false, groupName = card -->

<script type="text/javascript">
//<![CDATA[
/* Form validation */
requiredFields["card"] = new Array();
requiredFields["card"].push( "cardHolderName" );
requiredFields["card"].push( "cardNumber" );
requiredFields["card"].push( "expiryMonth" );
requiredFields["card"].push( "expiryYear" );
errorMessages["card"] = new Array();
errorMessages["card"][ "cardHolderName" ] = "Name des Karteninhabers fehlt ";
errorMessages["card"][ "cardNumber" ] = "Kartennummer fehlt";
errorMessages["card"][ "expiryMonth" ] = "Verfallmonat fehlt";
errorMessages["card"][ "expiryYear" ] = "Verfalljahre fehlt";
errorMessages["card"][ "cvcCode" ] = "CVC/CVV/CID fehlt";
errorMessages["card"]["generic"] = "Bitte tragen Sie Ihre Kartendaten ein";


                    



  var card_cvcinfo = new Array();
  card_cvcinfo["mc"] =  "<h3>Was ist CVC?<\/h3>" + 
                      "<p><img style=\"margin-right: 5px\" class=\"fl\" src=\"/hpp/img/CVC_mini.jpg\" alt=\"CVC location\" />" +
            "Der Card Validation Code (CVC) ist eine " + 
            "dreistellige Zahlenkombination, die <i>zus\u00E4tzlich<\/i> auf der R\u00FCckseite " +
            "der Kreditkarte aufgedruckt (nicht gepr\u00E4gt) ist.<\/p>" +
            "<p>Der CVC ist ein zus\u00E4tzliches Sicherheitsmerkmal um festzustellen, da\u00DF eine Kreditkarte tats\u00E4chlich physisch vorliegt.<\/p><br style=\"clear: both\" />";
  card_cvcinfo["maestro"] = "<h3>Was ist CVC?<\/h3>" + 
                      "<p><img style=\"margin-right: 5px\" class=\"fl\" src=\"/hpp/img/CVC_mini.jpg\" alt=\"CVC location\" />" +
            "Der Card Validation Code (CVC) ist eine " + 
            "dreistellige Zahlenkombination, die <i>zus\u00E4tzlich<\/i> auf der R\u00FCckseite " +
            "der Kreditkarte aufgedruckt (nicht gepr\u00E4gt) ist.<\/p>" +
            "<p>Der CVC ist ein zus\u00E4tzliches Sicherheitsmerkmal um festzustellen, da\u00DF eine Kreditkarte tats\u00E4chlich physisch vorliegt." +
                        " " +           "<\/p><br style=\"clear: both\" />";
  card_cvcinfo["visa"] =  "<h3>Was ist CVV?<\/h3>" + 
                      "<p><img style=\"margin-right: 5px\" class=\"fl\" src=\"/hpp/img/CVV_mini.jpg\" alt=\"CVV location\" />" +
            "Der Card Verification Value (CVV) ist eine " + 
            "dreistellige Zahlenkombination, die <i>zus\u00E4tzlich<\/i> auf der R\u00FCckseite " +
            "der Kreditkarte aufgedruckt (nicht gepr\u00E4gt) ist.<\/p>" +
            "<p>Der CVV ist ein zus\u00E4tzliches Sicherheitsmerkmal um festzustellen, da\u00DF eine Kreditkarte tats\u00E4chlich physisch vorliegt.<\/p><br style=\"clear: both\" />";
  card_cvcinfo["amex"] =  "<h3>Was ist CID?<\/h3>" + 
                      "<p><img style=\"margin-right: 5px\" class=\"fl\" src=\"/hpp/img/CID_mini.jpg\" alt=\"CID location\" />" +
            "Der Card IDentification (CID) ist eine " + 
            "vierstellige Zahlenkombination, die <i>zus\u00E4tzlich<\/i> auf der Vorderseite " +
            "der Kreditkarte aufgedruckt (nicht gepr\u00E4gt) ist.<\/p>" +
            "<p>Der CID ist ein zus\u00E4tzliches Sicherheitsmerkmal um festzustellen, da\u00DF eine Kreditkarte tats\u00E4chlich physisch vorliegt.<\/p><br style=\"clear: both\" />";
  card_cvcinfo["card"] =  "<h3>Was ist CVC\/CVV\/CID?<\/h3>" + 
                      "<p>Der Card Security Code (CVC\/CVV\/CID) ist eine " + 
            "drei- oder vierstellige Zahlenkombination, die <i>zus\u00E4tzlich<\/i> auf der Vorder-\/R\u00FCckseite " +
            "der Kreditkarte aufgedruckt (nicht gepr\u00E4gt) ist.<\/p>" +
            "<p>Der CVC\/CVV\/CID ist ein zus\u00E4tzliches Sicherheitsmerkmal um festzustellen, da\u00DF eine Kreditkarte tats\u00E4chlich physisch vorliegt.<\/p><br style=\"clear: both\" />"; 

  // pass these arround, instead of just using 
  var card_types = new Array();
  var card_logos = new Array();
  var card_displayAmountExtras = new Array();
  var card_extras = new Array();
  var card_previousCardNumber ="";
  var card_subVariantExtras = new Object();
  var card_subVariantExtrasPhrase = new Object();
  var card_extraCostDivId = 'pmmextracosts-card';
  var card_originalExtraCostPhrase = document.getElementById(card_extraCostDivId).innerHTML;
  
  
      card_types.push("amex");
    card_logos.push("/img/pm/amex");
          card_displayAmountExtras.push("");
      card_extras.push("");
    
                      card_subVariantExtras['amex'] = "";
        card_subVariantExtrasPhrase['amex'] = "";
                card_types.push("mc");
    card_logos.push("/img/pm/mc");
          card_displayAmountExtras.push("");
      card_extras.push("");
    
                      card_subVariantExtras['mcatm'] = "";
        card_subVariantExtrasPhrase['mcatm'] = "";
                        card_subVariantExtras['mccredit'] = "";
        card_subVariantExtrasPhrase['mccredit'] = "";
                        card_subVariantExtras['maestro'] = "";
        card_subVariantExtrasPhrase['maestro'] = "";
                        card_subVariantExtras['mc'] = "";
        card_subVariantExtrasPhrase['mc'] = "";
                        card_subVariantExtras['bijcard'] = "";
        card_subVariantExtrasPhrase['bijcard'] = "";
                        card_subVariantExtras['cirrus'] = "";
        card_subVariantExtrasPhrase['cirrus'] = "";
                        card_subVariantExtras['maestrouk'] = "";
        card_subVariantExtrasPhrase['maestrouk'] = "";
                        card_subVariantExtras['bcmc'] = "";
        card_subVariantExtrasPhrase['bcmc'] = "";
                        card_subVariantExtras['mcpro'] = "";
        card_subVariantExtrasPhrase['mcpro'] = "";
                        card_subVariantExtras['mccorporate'] = "";
        card_subVariantExtrasPhrase['mccorporate'] = "";
                        card_subVariantExtras['mcdebit'] = "";
        card_subVariantExtrasPhrase['mcdebit'] = "";
                        card_subVariantExtras['mccommercialcredit'] = "";
        card_subVariantExtrasPhrase['mccommercialcredit'] = "";
                card_types.push("visa");
    card_logos.push("/img/pm/visa");
          card_displayAmountExtras.push("");
      card_extras.push("");
    
                      card_subVariantExtras['travelmoney'] = "";
        card_subVariantExtrasPhrase['travelmoney'] = "";
                        card_subVariantExtras['visacorporate'] = "";
        card_subVariantExtrasPhrase['visacorporate'] = "";
                        card_subVariantExtras['visabusiness'] = "";
        card_subVariantExtrasPhrase['visabusiness'] = "";
                        card_subVariantExtras['visahipotecario'] = "";
        card_subVariantExtrasPhrase['visahipotecario'] = "";
                        card_subVariantExtras['visacredit'] = "";
        card_subVariantExtrasPhrase['visacredit'] = "";
                        card_subVariantExtras['visaproprietary'] = "";
        card_subVariantExtrasPhrase['visaproprietary'] = "";
                        card_subVariantExtras['visapurchasing'] = "";
        card_subVariantExtrasPhrase['visapurchasing'] = "";
                        card_subVariantExtras['visaclassic'] = "";
        card_subVariantExtrasPhrase['visaclassic'] = "";
                        card_subVariantExtras['visaplatinum'] = "";
        card_subVariantExtrasPhrase['visaplatinum'] = "";
                        card_subVariantExtras['visasignature'] = "";
        card_subVariantExtrasPhrase['visasignature'] = "";
                        card_subVariantExtras['electron'] = "";
        card_subVariantExtrasPhrase['electron'] = "";
                        card_subVariantExtras['visacommercialcredit'] = "";
        card_subVariantExtrasPhrase['visacommercialcredit'] = "";
                        card_subVariantExtras['visagold'] = "";
        card_subVariantExtrasPhrase['visagold'] = "";
                        card_subVariantExtras['visa'] = "";
        card_subVariantExtrasPhrase['visa'] = "";
                        card_subVariantExtras['visadebit'] = "";
        card_subVariantExtrasPhrase['visadebit'] = "";
                        card_subVariantExtras['visadankort'] = "";
        card_subVariantExtrasPhrase['visadankort'] = "";
            
    
  var baseURL = "/hpp";
  if(baseURL.indexOf(";jsession") != -1) {
    baseURL = baseURL.substr(0,baseURL.indexOf(";jsession"));
  }
  
  function validateCcNumber(e, groupName, group_types, group_logos, group_subVariantExtras, group_subVariantExtrasPhrase, dontHideErrorFrame) {
    cardNumber = (document.getElementById( 'cardNumber' ).value);
    
    // empty card field - reset all
    if (cardNumber.length == 0) {
      card_previousCardNumber = cardNumber;
      resetExtraCost(groupName);
      setCardBrand(null, false, groupName, group_types, group_logos);
      return;
    }

    // When editing the card (but not adding digits at the end), don't display validation error(s) and don't reformat the number
    var l=0;
    while(l < card_previousCardNumber.length && l < cardNumber.length) {
      if(cardNumber[l] != card_previousCardNumber[l]) {
        card_previousCardNumber = cardNumber;
        return;
      } 
      l++;
    }
  
    // remove all whitespace
    reg = /\s+/g;
    cardNumber = cardNumber.replace(reg,'');
    
    nrOfDigits = cardNumber.length;
    if(nrOfDigits > 19){
      ccNumberPresentation(false, groupName);
      return;
    }
    
    ccNumberPresentation(true, groupName, dontHideErrorFrame);
    
    baseCard = getBaseCard(cardNumber, group_types);
    if(baseCard != null) {
        setCardBrand(baseCard, true, groupName, group_types, group_logos);
    } else if(nrOfDigits > 4) {
        setCardBrand(null, true, groupName, group_types, group_logos);
      ccNumberPresentation(false,groupName);
    } else {
      setCardBrand(null, false, groupName, group_types, group_logos);
    }

    if (nrOfDigits < 6) {
      setExtraCost(baseCard, null, groupName, group_types, group_subVariantExtras, group_subVariantExtrasPhrase);
    } else if (nrOfDigits == 6 || nrOfDigits == 9 || nrOfDigits == 12 || nrOfDigits == 16){
      _.X("/hpp/binLookup.shtml",function(d,r){
        if(r.status != 200 || d.indexOf('"result"') == -1) return false;
              var response=eval("("+d+")");
          
        if(typeof(response.result)=='undefined') return false;
    
        if (response.result == 0) {
          lookedUpCardType = response.cardType;
        } else {
          lookedUpCardType = null;  
        }
        setExtraCost(baseCard, lookedUpCardType, groupName, group_types, group_subVariantExtras, group_subVariantExtrasPhrase);
    
        return true;
          }, 'bin='+cardNumber+'&'+_.Q(_.G("pageform")));
    }
    
    //show value with white space after four numbers
    result = cardNumber.replace(/(\d{4})/g, '$1 ');
    result = result.replace(/\s+$/, ''); //remove trailing spaces
    
    card_previousCardNumber = result;
    document.getElementById( 'cardNumber' ).value = result;
  }
  
  function setExtraCost(selectedCard, lookedUpCard, groupName, group_types, group_subVariantExtras, group_subVariantExtrasPhrase) {
    var extraCostDisplayed = false;
    if (lookedUpCard != null && group_subVariantExtras[lookedUpCard] != null) {
      document.getElementById('extraCostAmount').innerHTML = group_subVariantExtras[lookedUpCard];
      displayAmountExtras[groupName] = group_subVariantExtras[lookedUpCard];
      document.getElementById(card_extraCostDivId).innerHTML = group_subVariantExtrasPhrase[lookedUpCard];
      extraCostDisplayed = true;
    } else {
                for(var i = 0; i < group_types.length; ++i) {
          if(selectedCard != null && group_types[i] == selectedCard.cardtype && group_subVariantExtras[selectedCard.cardtype] != null) {
          document.getElementById('extraCostAmount').innerHTML = group_subVariantExtras[selectedCard.cardtype];
          displayAmountExtras[groupName] = group_subVariantExtras[selectedCard.cardtype];
          document.getElementById(card_extraCostDivId).innerHTML = group_subVariantExtrasPhrase[selectedCard.cardtype];
          extraCostDisplayed = true;
          }
          }
    }
    
    if (!extraCostDisplayed) {
      resetExtraCost(groupName);
    }
  }
  
  function resetExtraCost(groupName) {
    // groupName is not used anymore
    displayAmountExtras['card'] = "";
    document.getElementById('extraCostAmount').innerHTML = "";
    document.getElementById(card_extraCostDivId).innerHTML = card_originalExtraCostPhrase;
  }
  
  function setCardBrand(selectedCard, greyInactive, groupName, group_types, group_logos) {

    for(var i = 0; i < group_types.length; ++i) {
        var imageId =  'cclogo'  + i;
      if(selectedCard != null && group_types[i] == selectedCard.cardtype) {
        document.getElementById(imageId).src=baseURL + group_logos[i] + "_small.png";
      } else {
          if(greyInactive) {
          document.getElementById(imageId).src=baseURL + group_logos[i] + "_small_grey.png";
        } else {
          document.getElementById(imageId).src=baseURL + group_logos[i] + "_small.png";
        }
      }
      document.getElementById(imageId).style.display="inline";
    }
    
    setCvcElement(selectedCard != null ? selectedCard.cardtype : null, groupName);
  }
  
  function setCvcElement(selectedCardType, groupName) {
    // for tokenising, the cvc element is not displayed, so check before using it
    var cvcCodeElem = document.getElementById( 'cvcCode' );
    if(selectedCardType != null && cvcCodeElem != null) {
      if(selectedCardType == "amex") {
      cvcCodeElem.maxLength = 4;
      document.getElementById( 'cvcName' ).innerHTML = "CID";
      document.getElementById( 'cvcWhatIs' ).innerHTML = "Was ist CID?";
      document.getElementById( 'cvcFrame' ).innerHTML = card_cvcinfo["amex"];
      } else if (selectedCardType == "visa" || selectedCardType == "electron") {
        cvcCodeElem.maxLength = 3;
      document.getElementById( 'cvcName' ).innerHTML = "CVV";
      document.getElementById( 'cvcWhatIs' ).innerHTML = "Was ist CVV?";
      document.getElementById( 'cvcFrame' ).innerHTML = card_cvcinfo["visa"];
      } else if (selectedCardType == "mc" || selectedCardType == "maestrouk" || selectedCardType == "solo" || selectedCardType == "bijcard" || selectedCardType == "elo") {
        cvcCodeElem.maxLength = 3;
      document.getElementById( 'cvcName' ).innerHTML = "CVC";
      document.getElementById( 'cvcWhatIs' ).innerHTML = "Was ist CVC?";
      document.getElementById( 'cvcFrame' ).innerHTML = card_cvcinfo["mc"];
      } else if (selectedCardType == "maestro") {
                cvcCodeElem.maxLength = 3;
      document.getElementById( 'cvcName' ).innerHTML = "CVC <i></i>";
      document.getElementById( 'cvcWhatIs' ).innerHTML = "Was ist CVC?";
      document.getElementById( 'cvcFrame' ).innerHTML = card_cvcinfo["maestro"];
      } else {
        cvcCodeElem.maxLength = 3;
      document.getElementById( 'cvcName' ).innerHTML = "CVC";
      document.getElementById( 'cvcWhatIs' ).innerHTML = "Was ist CVC?";
      document.getElementById( 'cvcFrame' ).innerHTML = card_cvcinfo[groupName];
      }  
    }
  }
  
  
  function ccNumberPresentation(valid, groupName, dontHideErrorFrame){
    // groupName is not used anymore
    var errors = new Array();
    errors.push( 'cardNumber' );
    if(valid){
      clearErrors(errors, dontHideErrorFrame);
    }
    else{
      markErrorFields(errors);
    }
  }
  
  function doCCCheck(groupName){
    // groupName is not used anymore
    var cardNumberField = document.getElementById( 'cardNumber' );
    if(isCardNumberValid(cardNumberField)) {
      ccNumberPresentation(true,groupName);
    } else {
      ccNumberPresentation(false,groupName);
    }
  }
    
  function isCardNumberValid(cardNumberField){
    cardNumber = cardNumberField.value;
    reg = /\s+/g;
    cardNumber = cardNumber.replace(reg,'');
    if(cardNumber == "" || luhnCheck(cardNumber)){
      return true;
    }
    return false;
  }
  
  validationFunctions["card"] = new Array();
  validationFunctions["card"][ "cardNumber" ] = isCardNumberValid;  



//]]>
</script>

 
<table class="basetable">
  

  
<tbody><tr id="cclogoTr">
    <td class="mid">
      <div id="cclogoheader" style="display: none">Card Type</div>
          </td>
    <td class="mid">
        <div style="height: 25px" id="cclogo">
          <img alt="" id="cclogo0" style="display: inline;" class="mid" src="/img/pm/amex_small.png">
          <img alt="" id="cclogo1" style="display: inline;" class="mid" src="/img/pm/mc_small.png">
          <img alt="" id="cclogo2" style="display: inline;" class="mid" src="/img/pm/visa_small.png">
          <img alt="" id="cclogo3" style="display: none" class="mid" src="/img/pm/unknown_small.png">
          <img alt="" id="cclogo4" style="display: none" class="mid" src="/img/pm/unknown_small.png">
          <img alt="" id="cclogo5" style="display: none" class="mid" src="/img/pm/unknown_small.png">
          <img alt="" id="cclogo6" style="display: none" class="mid" src="/img/pm/unknown_small.png">
          <img alt="" id="cclogo7" style="display: none" class="mid" src="/img/pm/unknown_small.png">
          <img alt="" id="cclogo8" style="display: none" class="mid" src="/img/pm/unknown_small.png">
          <script type="text/javascript">
            setCardBrand(null, false, 'card', card_types, card_logos);
          </script>
      </div>
    </td>
</tr>

<tr id="cardNumberTr">
        <td class="cardNumberTitle"><div>Kartennummer</div></td>
        <td><div class="fieldDiv"><input type="text" class="inputField" id="cardNumber" onkeypress="return blockNonNumberEvents(event)" onkeyup="validateCcNumber(event, &#39;card&#39;, card_types, card_logos, card_subVariantExtras, card_subVariantExtrasPhrase)" onchange="validateCcNumber(event, &#39;card&#39;, card_types, card_logos, card_subVariantExtras, card_subVariantExtrasPhrase) ; doCCCheck(&#39;card&#39;)" name="cardNumber" value="" size="24" maxlength="23"></div></td>
</tr>
<tr>
        <td><div>Name des Karteninhabers</div></td>
        <td><div class="fieldDiv">
          <input type="text" class="inputField" id="cardHolderName" name="cardHolderName" value="" size="19" maxlength="30">
        </div></td>
</tr>

<tr>
        <td><div>Gültig bis: </div></td><td>
        <div class="fieldDiv" id="expiryContainer">
      <select class="inputField" name="expiryMonth" id="expiryMonth" size="1">
        <option value="">&nbsp;</option>
          <option value="01">01</option>
          <option value="02">02</option>
          <option value="03">03</option>
          <option value="04">04</option>
          <option value="05">05</option>
          <option value="06">06</option>
          <option value="07">07</option>
          <option value="08">08</option>
          <option value="09">09</option>
          <option value="10">10</option>
          <option value="11">11</option>
          <option value="12">12</option>
            </select>
        &nbsp;/&nbsp; 
        <select class="inputField" name="expiryYear" id="expiryYear" size="1">
        <option value="">&nbsp;</option>
              <option value="2013">2013</option>
              <option value="2014">2014</option>
              <option value="2015">2015</option>
              <option value="2016">2016</option>
              <option value="2017">2017</option>
              <option value="2018">2018</option>
              <option value="2019">2019</option>
              <option value="2020">2020</option>
              <option value="2021">2021</option>
              <option value="2022">2022</option>
              <option value="2023">2023</option>
              <option value="2024">2024</option>
              <option value="2025">2025</option>
              <option value="2026">2026</option>
              <option value="2027">2027</option>
            </select>
        </div>
        </td>
</tr>

<tr>
            <td><!--  brandCodeUndef --><div id="cvcName">CVC/CVV/CID <i></i></div></td>
        <td><div class="fieldDiv"><input class="inputField" type="text" name="cvcCode" value="" id="cvcCode" size="7" maxlength="3"> &nbsp; 
        <a href="https://live.adyen.com/hpp/pay.shtml#" onclick="return toggleElement( &#39;cvcFrame&#39; );">
        <span id="cvcWhatIs">Was ist CVC/CVV/CID?</span></a></div></td>
</tr>

                      


  <tr>
      <td colspan="2"><div class="r">
                            <input class="paySubmit paySubmitcard" type="submit" name="pay" value="Jetzt bestellen">
                </div></td>
    </tr>
</tbody></table>

<div class="popupMsg  popupMsgOPP " style="display: none;" onclick="return hideElement( &#39;cvcFrame&#39; );" id="cvcFrame">
  <h3>Was ist CVC/CVV/CID?</h3>
  <p>Der Card Security Code (CVC/CVV/CID) ist eine
          drei- oder vierstellige Zahlenkombination, die <i>zusätzlich</i> auf der Vorder-/Rückseite
        der Kreditkarte aufgedruckt (nicht geprägt) ist.</p>
    <p>Der CVC/CVV/CID ist ein zusätzliches Sicherheitsmerkmal um festzustellen, daß eine Kreditkarte tatsächlich physisch vorliegt.</p>
    <p></p></div>


<script type="text/javascript">
//<![CDATA[
  if(document.getElementById( "cardNumber" ).value.length > 0) {
    var validateCcNumberTimer = setTimeout("validateCcNumber(null, 'card', card_types, card_logos, card_subVariantExtras, card_subVariantExtrasPhrase, true)", 2500);
  }
//]]>
</script>

            </div>
</li>
  
  
</ul>


  <div id="errorFrame" style="display: none;" class="popupMsg errorFrame">
    <div id="errorFrameValidationErrors">
    </div>
  </div>
  <div id="okFrame" style="display: none;" class="popupMsg okFrame">
  <div id="okFrameMessages">
  </div>
</div>